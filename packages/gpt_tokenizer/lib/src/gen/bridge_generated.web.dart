// AUTO GENERATED FILE, DO NOT EDIT.
// Generated by `flutter_rust_bridge`@ 1.82.6.
// ignore_for_file: non_constant_identifier_names, unused_element, duplicate_ignore, directives_ordering, curly_braces_in_flow_control_structures, unnecessary_lambdas, slash_for_doc_comments, prefer_const_literals_to_create_immutables, implicit_dynamic_list_literal, duplicate_import, unused_import, unnecessary_import, prefer_single_quotes, prefer_const_constructors, use_super_parameters, always_use_package_imports, annotate_overrides, invalid_use_of_protected_member, constant_identifier_names, invalid_use_of_internal_member, prefer_is_empty, unnecessary_const

import 'dart:convert';
import 'dart:async';
import 'package:meta/meta.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge.dart';
import 'package:uuid/uuid.dart';
import 'bridge_generated.dart';
export 'bridge_generated.dart';

class GptTokenizerPlatform extends FlutterRustBridgeBase<GptTokenizerWire> with FlutterRustBridgeSetupMixin {
  GptTokenizerPlatform(FutureOr<WasmModule> dylib) : super(GptTokenizerWire(dylib)) {
    setupMixinConstructor();
  }
  Future<void> setup() => inner.init;

// Section: api2wire

  @protected
  Object api2wire_CoreBpe(CoreBpe raw) {
    return raw.shareOrMove();
  }

  @protected
  String api2wire_String(String raw) {
    return raw;
  }

  @protected
  List<String> api2wire_StringList(List<String> raw) {
    return raw;
  }

  @protected
  List<dynamic> api2wire_box_autoadd_bpe_wrapper(BPEWrapper raw) {
    return api2wire_bpe_wrapper(raw);
  }

  @protected
  List<dynamic> api2wire_bpe_wrapper(BPEWrapper raw) {
    return [
      api2wire_CoreBpe(raw.bpe)
    ];
  }

  @protected
  List<dynamic> api2wire_encoder_map_entry(EncoderMapEntry raw) {
    return [
      api2wire_uint_8_list(raw.key),
      api2wire_usize(raw.value)
    ];
  }

  @protected
  List<dynamic> api2wire_list_encoder_map_entry(List<EncoderMapEntry> raw) {
    return raw.map(api2wire_encoder_map_entry).toList();
  }

  @protected
  List<dynamic> api2wire_list_special_encoder_map_entry(List<SpecialEncoderMapEntry> raw) {
    return raw.map(api2wire_special_encoder_map_entry).toList();
  }

  @protected
  List<dynamic> api2wire_special_encoder_map_entry(SpecialEncoderMapEntry raw) {
    return [
      api2wire_String(raw.key),
      api2wire_usize(raw.value)
    ];
  }

  @protected
  Uint32List api2wire_uint_32_list(Uint32List raw) {
    return raw;
  }

  @protected
  Uint8List api2wire_uint_8_list(Uint8List raw) {
    return raw;
  }

// Section: finalizer

  late final Finalizer<PlatformPointer> _CoreBpeFinalizer = Finalizer<PlatformPointer>(inner.drop_opaque_CoreBpe);
  Finalizer<PlatformPointer> get CoreBpeFinalizer => _CoreBpeFinalizer;
}

// Section: WASM wire module

@JS('wasm_bindgen')
external GptTokenizerWasmModule get wasmModule;

@JS()
@anonymous
class GptTokenizerWasmModule implements WasmModule {
  external Object /* Promise */ call([String? moduleName]);
  external GptTokenizerWasmModule bind(dynamic thisArg, String moduleName);
  external dynamic /* void */ wire_create__static_method__BPEWrapper(NativePortType port_, List<dynamic> encoder_entries, List<dynamic> special_tokens_encoder_entries, String pattern);

  external dynamic /* void */ wire_load__static_method__BPEWrapper(NativePortType port_, String path, List<dynamic> special_tokens_encoder_entries, String pattern);

  external dynamic /* void */ wire_encode_ordinary__method__BPEWrapper(NativePortType port_, List<dynamic> that, String text);

  external dynamic /* void */ wire_encode__method__BPEWrapper(NativePortType port_, List<dynamic> that, String text, List<String> allowed_special_entries);

  external dynamic /* void */ wire_count_token__method__BPEWrapper(NativePortType port_, List<dynamic> that, String text, List<String> allowed_special_entries);

  external dynamic /* void */ wire_encode_bytes__method__BPEWrapper(NativePortType port_, List<dynamic> that, Uint8List bytes);

  external dynamic /* void */ wire_encode_single_token__method__BPEWrapper(NativePortType port_, List<dynamic> that, Uint8List piece);

  external dynamic /* void */ wire_decode_bytes__method__BPEWrapper(NativePortType port_, List<dynamic> that, Uint32List tokens);

  external dynamic /* void */ wire_decode_single_token_bytes__method__BPEWrapper(NativePortType port_, List<dynamic> that, int token);

  external dynamic /*  */ drop_opaque_CoreBpe(ptr);

  external int /* *const c_void */ share_opaque_CoreBpe(ptr);
}

// Section: WASM wire connector

class GptTokenizerWire extends FlutterRustBridgeWasmWireBase<GptTokenizerWasmModule> {
  GptTokenizerWire(FutureOr<WasmModule> module) : super(WasmModule.cast<GptTokenizerWasmModule>(module));

  void wire_create__static_method__BPEWrapper(NativePortType port_, List<dynamic> encoder_entries, List<dynamic> special_tokens_encoder_entries, String pattern) => wasmModule.wire_create__static_method__BPEWrapper(port_, encoder_entries, special_tokens_encoder_entries, pattern);

  void wire_load__static_method__BPEWrapper(NativePortType port_, String path, List<dynamic> special_tokens_encoder_entries, String pattern) => wasmModule.wire_load__static_method__BPEWrapper(port_, path, special_tokens_encoder_entries, pattern);

  void wire_encode_ordinary__method__BPEWrapper(NativePortType port_, List<dynamic> that, String text) => wasmModule.wire_encode_ordinary__method__BPEWrapper(port_, that, text);

  void wire_encode__method__BPEWrapper(NativePortType port_, List<dynamic> that, String text, List<String> allowed_special_entries) => wasmModule.wire_encode__method__BPEWrapper(port_, that, text, allowed_special_entries);

  void wire_count_token__method__BPEWrapper(NativePortType port_, List<dynamic> that, String text, List<String> allowed_special_entries) => wasmModule.wire_count_token__method__BPEWrapper(port_, that, text, allowed_special_entries);

  void wire_encode_bytes__method__BPEWrapper(NativePortType port_, List<dynamic> that, Uint8List bytes) => wasmModule.wire_encode_bytes__method__BPEWrapper(port_, that, bytes);

  void wire_encode_single_token__method__BPEWrapper(NativePortType port_, List<dynamic> that, Uint8List piece) => wasmModule.wire_encode_single_token__method__BPEWrapper(port_, that, piece);

  void wire_decode_bytes__method__BPEWrapper(NativePortType port_, List<dynamic> that, Uint32List tokens) => wasmModule.wire_decode_bytes__method__BPEWrapper(port_, that, tokens);

  void wire_decode_single_token_bytes__method__BPEWrapper(NativePortType port_, List<dynamic> that, int token) => wasmModule.wire_decode_single_token_bytes__method__BPEWrapper(port_, that, token);

  dynamic /*  */ drop_opaque_CoreBpe(ptr) => wasmModule.drop_opaque_CoreBpe(ptr);

  int /* *const c_void */ share_opaque_CoreBpe(ptr) => wasmModule.share_opaque_CoreBpe(ptr);
}
